@precedence {
  attribute @left
  structure @left
  valueOp @left
  sub
}

@skip { whitespace | Comment | LineComment }

@top StyleSheet { blockContent }

item {
  RuleSet |
  ImportStatement |
  MediaStatement |
  CharsetStatement |
  NamespaceStatement |
  KeyframesStatement |
  SupportsStatement |
  AtRule
}

mixinArgList { ArgList<value (":" value+ | value*) | AtKeyword? "..."> }

RuleSet {
  selector ("," selector)* mixinArgList? (@extend[@name=when]<identifier, "when"> value)? Block
}

ImportStatement {
  @specialize[@name=import]<AtKeyword, "@import" | "@plugin"> ("(" value ")")? StringLiteral commaSep<query> ";"
}

MediaStatement {
  @specialize[@name=media]<AtKeyword, "@media"> commaSep<query> Block
}

CharsetStatement {
  @specialize[@name=charset]<AtKeyword, "@charset"> value ";"
}

NamespaceStatement {
  @specialize[@name=namespace]<AtKeyword, "@namespace">
  NamespaceName { identifier }?
  (StringLiteral | CallLiteral) ";"
}

KeyframesStatement {
  @specialize[@name=keyframes]<AtKeyword, "@keyframes">
  KeyframeName { identifier }
  KeyframeList
}

KeyframeList {
  "{" ((kw<"from"> | kw<"to"> | NumberLiteral) Block)* "}"
}

SupportsStatement {
  @specialize[@name=supports]<AtKeyword, "@supports"> query Block
}

AtRule { AtKeyword commaSep<query> (";" | Block) }

Block { "{" blockContent "}" }

decl { Declaration | Inclusion | CallExpression }

blockContent {
  ~item item* (decl (";" ~item item* decl?)*)?
}

selector {
  UniversalSelector |
  TagSelector { ~item TagName { identifier ~item } } |
  NestingSelector |
  ClassSelector { selector? !attribute "." ClassName } |
  PseudoClassSelector {
    selector? !attribute (":" | "::") (
      PseudoClassName { identifier } |
      pseudoClassWithArg ArgList<value+> |
      PseudoClassName { callee } ArgList<selector>)
  } |
  IdSelector |
  AttributeSelector { selector? !attribute "[" AttributeName { identifier } (MatchOp value)? "]" } |
  ChildSelector { selector !structure ChildOp selector } |
  DescendantSelector { selector !structure descendantOp selector } |
  SiblingSelector { selector !structure SiblingOp { "~" | "+" } selector } |
  InterpolatedSelector { Interpolation ~item }
}

IdSelector { selector? !attribute "#" IdName }

ClassName { identifier }
IdName { identifier }

pseudoClassWithArg {
  @specialize[@name=PseudoClassName]<callee, "lang" | "nth-child" | "nth-last-child" | "nth-of-type" | "nth-last-of-type" | "nth-of-type" | "dir" | "host-context">
}

NumberLiteral {
  numberLiteralInner Unit?
}

ArgList<content> {
  "(" (content (("," | ";") content)*)? ")"
}

PropertyName { identifier ~item }

Declaration {
  (Interpolation? PropertyName (Interpolation PropertyName?)* | Interpolation ~item | VariableName | AtKeyword | Escape)
  ("+" | "+_")? ":"
  (value (","? value)* Important? | 
   Inclusion { (IdSelector { "#" IdName } | ClassSelector { "." ClassName }) selector? mixinArgList? })
}

Inclusion {
  selector mixinArgList? Important?
}

unaryOp { @specialize[@name=UnaryQueryOp]<identifier, "not" | "only"> }

query {
  KeywordQuery { identifier } |
  FeatureQuery { "(" FeatureName { identifier } ":" value+ ")" } |
  BinaryQuery { query !valueOp (LogicOp | BinOp) query } |
  UnaryQuery { unaryOp query } |
  ParenthesizedQuery { "(" query ")" } |
  SelectorQuery { @specialize[@name=selector]<callee, "selector"> "(" selector ")" } |
  CallQuery { callee ArgList<query> } |
  SubscriptQuery { query !sub "[" value? "]" } |
  AtKeyword |
  Escape |
  Interpolation
}

value {
  VariableName |
  AtKeyword |
  PropertyVariable |
  ValueName { identifier } |
  ParenthesizedValue { "(" value ")" } |
  ColorLiteral |
  NumberLiteral |
  StringLiteral |
  Escape |
  Interpolation |
  Block |
  BinaryExpression { value !valueOp (BinOp | LogicOp) value } |
  UnaryExpression { unaryOp value } |
  CallExpression |
  SubscriptExpression { value !sub "[" value? "]" } |
  CallLiteral
}

CallLiteral {
  @specialize[@name=CallTag]<callee, "url" | "url-prefix" | "domain" | "regexp">
  "(" (ParenthesizedContent | StringLiteral) ")"
}

CallExpression {
  Callee { callee } ArgList<value+>
}

commaSep<value> { "" | value ("," value)* }

kw<term> { @specialize[@name={term}]<identifier, term> }

@external tokens descendant from "./tokens" {
  descendantOp
}

@external tokens unitToken from "./tokens" {
  Unit
}

@external tokens identifiers from "./tokens" {
  callee,
  identifier,
  VariableName
}

LogicOp { @specialize<identifier, "and" | "or"> }

@tokens {
  UniversalSelector { "*" }

  NestingSelector { "&" (@asciiLetter | @digit | "-")* }

  word { @asciiLetter (@asciiLetter | @digit | "-")* }

  AtKeyword { "@" "@"? word }

  PropertyVariable { "$" word }

  MatchOp { $[~^|*$]? "=" }

  ChildOp { ">" ">"? }

  BinOp { $[+\-*/=] | $[<>] "="? | "=" $[<>] }

  Important { "!important" }

  whitespace { @whitespace+ }

  Comment { "/*" commentRest }

  commentRest { ![*] commentRest | "*" commentAfterStar }

  commentAfterStar { "/" | "*" commentAfterStar | ![/*] commentRest }

  LineComment { "//" ![\n]* }

  @precedence { Comment, LineComment, BinOp }

  hexDigit { @digit | $[a-fA-F] }

  ParenthesizedContent { !['")] ![)]+ }

  @precedence { whitespace, ParenthesizedContent, Comment, LineComment }

  ColorLiteral {
    "#" hexDigit hexDigit hexDigit (hexDigit (hexDigit hexDigit (hexDigit hexDigit)?)?)?
  }

  numberLiteralInner { ("+" | "-")? (@digit+ ("." @digit*)? | "." @digit+) (("e" | "E") ("+" | "-")? @digit+)? }

  @precedence { numberLiteralInner, ".", BinOp }

  StringLiteral { "\"" (!["\n\\] | "\\" _)* "\"" | "'" (!['\n\\] | "\\" _)* "'" }

  Escape { "~" StringLiteral }

  Interpolation { "@{" word "}" }

  "#"

  ":" "::" ";" ","

  "(" ")" "[" "]" "{" "}"
}

@external propSource lessHighlighting from "./highlight"

@detectDelim
